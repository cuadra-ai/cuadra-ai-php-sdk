<?php

declare(strict_types=1);

/*
 * CuadraAiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace CuadraAiLib\Exceptions;

use CuadraAiLib\ApiHelper;

/**
 * Standard error response format for Cuadra AI
 */
class ErrorResponseException extends ApiException
{
    /**
     * @var string|null
     */
    private $messageProperty;

    /**
     * @var int|null
     */
    private $status;

    /**
     * @var array
     */
    private $fieldErrors = [];

    /**
     * Returns Message Property.
     * A message describing the error
     */
    public function getMessageProperty(): ?string
    {
        return $this->messageProperty;
    }

    /**
     * Sets Message Property.
     * A message describing the error
     *
     * @maps message
     */
    public function setMessageProperty(?string $messageProperty): void
    {
        $this->messageProperty = $messageProperty;
    }

    /**
     * Returns Status.
     * HTTP status code
     */
    public function getStatus(): ?int
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * HTTP status code
     *
     * @maps status
     */
    public function setStatus(?int $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Field Errors.
     * Optional: Field-specific validation errors
     *
     * @return array<string,string|null>|null
     */
    public function getFieldErrors(): ?array
    {
        if (count($this->fieldErrors) == 0) {
            return null;
        }
        return $this->fieldErrors['value'];
    }

    /**
     * Sets Field Errors.
     * Optional: Field-specific validation errors
     *
     * @maps field_errors
     *
     * @param array<string,string|null>|null $fieldErrors
     */
    public function setFieldErrors(?array $fieldErrors): void
    {
        $this->fieldErrors['value'] = $fieldErrors;
    }

    /**
     * Unsets Field Errors.
     * Optional: Field-specific validation errors
     */
    public function unsetFieldErrors(): void
    {
        $this->fieldErrors = [];
    }

    /**
     * Converts the ErrorResponseException object to a human-readable string representation.
     *
     * @return string The string representation of the ErrorResponseException object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ErrorResponseException',
            [
                'messageProperty' => $this->messageProperty,
                'status' => $this->status,
                'fieldErrors' => $this->getFieldErrors(),
                'additionalProperties' => $this->additionalProperties
            ],
            parent::__toString()
        );
    }

    protected $propertyNames = ['message', 'status', 'field_errors'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }
}
