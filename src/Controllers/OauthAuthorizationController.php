<?php

declare(strict_types=1);

/*
 * CuadraAiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace CuadraAiLib\Controllers;

use Core\Request\Parameters\AdditionalFormParams;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use CuadraAiLib\Exceptions\OauthProviderException;
use CuadraAiLib\Http\ApiResponse;
use CuadraAiLib\Models\OauthToken;
use CuadraAiLib\Server;

class OauthAuthorizationController extends BaseController
{
    /**
     * Create a new OAuth 2 token.
     *
     * @param string $authorization Authorization header in Basic auth format
     * @param string $code Authorization Code
     * @param string $redirectUri Redirect Uri
     * @param array|null $fieldParameters Additional optional form parameters are supported by this
     *        endpoint
     *
     * @return ApiResponse Response from the API call
     */
    public function requestToken(
        string $authorization,
        string $code,
        string $redirectUri,
        ?array $fieldParameters = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/token')
            ->server(Server::AUTH_SERVER)
            ->parameters(
                FormParam::init('grant_type', 'authorization_code'),
                HeaderParam::init('Authorization', $authorization)->required(),
                FormParam::init('code', $code)->required(),
                FormParam::init('redirect_uri', $redirectUri)->required(),
                AdditionalFormParams::init($fieldParameters)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('OAuth 2 provider returned an error.', OauthProviderException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'OAuth 2 provider says client authentication failed.',
                    OauthProviderException::class
                )
            )
            ->type(OauthToken::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Obtain a new access token using a refresh token
     *
     * @param string $authorization Authorization header in Basic auth format
     * @param string $refreshToken Refresh token
     * @param string|null $scope Requested scopes as a space-delimited list.
     * @param array|null $fieldParameters Additional optional form parameters are supported by this
     *        endpoint
     *
     * @return ApiResponse Response from the API call
     */
    public function refreshToken(
        string $authorization,
        string $refreshToken,
        ?string $scope = null,
        ?array $fieldParameters = null
    ): ApiResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/token')
            ->server(Server::AUTH_SERVER)
            ->parameters(
                FormParam::init('grant_type', 'refresh_token'),
                HeaderParam::init('Authorization', $authorization)->required(),
                FormParam::init('refresh_token', $refreshToken)->required(),
                FormParam::init('scope', $scope),
                AdditionalFormParams::init($fieldParameters)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init('OAuth 2 provider returned an error.', OauthProviderException::class)
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'OAuth 2 provider says client authentication failed.',
                    OauthProviderException::class
                )
            )
            ->type(OauthToken::class)
            ->returnApiResponse();

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
