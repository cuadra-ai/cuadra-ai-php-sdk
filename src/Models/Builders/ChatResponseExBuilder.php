<?php

declare(strict_types=1);

/*
 * CuadraAiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace CuadraAiLib\Models\Builders;

use Core\Utils\CoreHelper;
use CuadraAiLib\Models\ChatResponseEx;
use CuadraAiLib\Models\UsageEx;

/**
 * Builder for model ChatResponseEx
 *
 * @see ChatResponseEx
 */
class ChatResponseExBuilder
{
    /**
     * @var ChatResponseEx
     */
    private $instance;

    private function __construct(ChatResponseEx $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new Chat Response Ex Builder object.
     */
    public static function init(): self
    {
        return new self(new ChatResponseEx());
    }

    /**
     * Sets output field.
     *
     * @param string|null $value
     */
    public function output(?string $value): self
    {
        $this->instance->setOutput($value);
        return $this;
    }

    /**
     * Sets confidence Score field.
     *
     * @param float|null $value
     */
    public function confidenceScore(?float $value): self
    {
        $this->instance->setConfidenceScore($value);
        return $this;
    }

    /**
     * Sets model field.
     *
     * @param string|null $value
     */
    public function model(?string $value): self
    {
        $this->instance->setModel($value);
        return $this;
    }

    /**
     * Sets usage field.
     *
     * @param UsageEx|null $value
     */
    public function usage(?UsageEx $value): self
    {
        $this->instance->setUsage($value);
        return $this;
    }

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function additionalProperty(string $name, $value): self
    {
        $this->instance->addAdditionalProperty($name, $value);
        return $this;
    }

    /**
     * Initializes a new Chat Response Ex object.
     */
    public function build(): ChatResponseEx
    {
        return CoreHelper::clone($this->instance);
    }
}
