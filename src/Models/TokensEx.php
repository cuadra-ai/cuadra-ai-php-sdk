<?php

declare(strict_types=1);

/*
 * CuadraAiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace CuadraAiLib\Models;

use CuadraAiLib\ApiHelper;
use stdClass;

/**
 * Tokens used
 */
class TokensEx implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $inputTokens;

    /**
     * @var int|null
     */
    private $outputTokens;

    /**
     * Returns Input Tokens.
     * Number of tokens of the request input
     */
    public function getInputTokens(): ?int
    {
        return $this->inputTokens;
    }

    /**
     * Sets Input Tokens.
     * Number of tokens of the request input
     *
     * @maps inputTokens
     */
    public function setInputTokens(?int $inputTokens): void
    {
        $this->inputTokens = $inputTokens;
    }

    /**
     * Returns Output Tokens.
     * Number of tokens of the response output
     */
    public function getOutputTokens(): ?int
    {
        return $this->outputTokens;
    }

    /**
     * Sets Output Tokens.
     * Number of tokens of the response output
     *
     * @maps outputTokens
     */
    public function setOutputTokens(?int $outputTokens): void
    {
        $this->outputTokens = $outputTokens;
    }

    /**
     * Converts the TokensEx object to a human-readable string representation.
     *
     * @return string The string representation of the TokensEx object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'TokensEx',
            [
                'inputTokens' => $this->inputTokens,
                'outputTokens' => $this->outputTokens,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['inputTokens', 'outputTokens'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->inputTokens)) {
            $json['inputTokens']  = $this->inputTokens;
        }
        if (isset($this->outputTokens)) {
            $json['outputTokens'] = $this->outputTokens;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
