<?php

declare(strict_types=1);

/*
 * CuadraAiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace CuadraAiLib\Models;

use CuadraAiLib\ApiHelper;
use CuadraAiLib\Utils\DateTimeHelper;
use stdClass;

class ModelEx implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string
     */
    private $name;

    /**
     * @var string
     */
    private $type;

    /**
     * @var string
     */
    private $description;

    /**
     * @var bool|null
     */
    private $proprietary;

    /**
     * @var string|null
     */
    private $baseModel;

    /**
     * @var string|null
     */
    private $baseModelId;

    /**
     * @var \DateTime|null
     */
    private $createdAt;

    /**
     * @var \DateTime|null
     */
    private $updatedAt;

    /**
     * @param string $name
     * @param string $type
     * @param string $description
     */
    public function __construct(string $name, string $type, string $description)
    {
        $this->name = $name;
        $this->type = $type;
        $this->description = $description;
    }

    /**
     * Returns Id.
     * Model Id
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Model Id
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Name.
     * Model name
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * Model name
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Type.
     * Model type of content generation and processing
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * Model type of content generation and processing
     *
     * @required
     * @maps type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Description.
     * Brief description of the model
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * Brief description of the model
     *
     * @required
     * @maps description
     */
    public function setDescription(string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Proprietary.
     * Indicates whether is a custom model created by you or not
     */
    public function getProprietary(): ?bool
    {
        return $this->proprietary;
    }

    /**
     * Sets Proprietary.
     * Indicates whether is a custom model created by you or not
     *
     * @maps proprietary
     */
    public function setProprietary(?bool $proprietary): void
    {
        $this->proprietary = $proprietary;
    }

    /**
     * Returns Base Model.
     * Base model name, if it was created from another model
     */
    public function getBaseModel(): ?string
    {
        return $this->baseModel;
    }

    /**
     * Sets Base Model.
     * Base model name, if it was created from another model
     *
     * @maps baseModel
     */
    public function setBaseModel(?string $baseModel): void
    {
        $this->baseModel = $baseModel;
    }

    /**
     * Returns Base Model Id.
     * Base model id, if it was created from another model
     */
    public function getBaseModelId(): ?string
    {
        return $this->baseModelId;
    }

    /**
     * Sets Base Model Id.
     * Base model id, if it was created from another model
     *
     * @maps baseModelId
     */
    public function setBaseModelId(?string $baseModelId): void
    {
        $this->baseModelId = $baseModelId;
    }

    /**
     * Returns Created At.
     * Creation date
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->createdAt;
    }

    /**
     * Sets Created At.
     * Creation date
     *
     * @maps createdAt
     * @factory \CuadraAiLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedAt(?\DateTime $createdAt): void
    {
        $this->createdAt = $createdAt;
    }

    /**
     * Returns Updated At.
     * Last time it was updated
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->updatedAt;
    }

    /**
     * Sets Updated At.
     * Last time it was updated
     *
     * @maps updatedAt
     * @factory \CuadraAiLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setUpdatedAt(?\DateTime $updatedAt): void
    {
        $this->updatedAt = $updatedAt;
    }

    /**
     * Converts the ModelEx object to a human-readable string representation.
     *
     * @return string The string representation of the ModelEx object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ModelEx',
            [
                'id' => $this->id,
                'name' => $this->name,
                'type' => $this->type,
                'description' => $this->description,
                'proprietary' => $this->proprietary,
                'baseModel' => $this->baseModel,
                'baseModelId' => $this->baseModelId,
                'createdAt' => $this->createdAt,
                'updatedAt' => $this->updatedAt,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = [
        'id',
        'name',
        'type',
        'description',
        'proprietary',
        'baseModel',
        'baseModelId',
        'createdAt',
        'updatedAt'
    ];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']          = $this->id;
        }
        $json['name']            = $this->name;
        $json['type']            = $this->type;
        $json['description']     = $this->description;
        if (isset($this->proprietary)) {
            $json['proprietary'] = $this->proprietary;
        }
        if (isset($this->baseModel)) {
            $json['baseModel']   = $this->baseModel;
        }
        if (isset($this->baseModelId)) {
            $json['baseModelId'] = $this->baseModelId;
        }
        if (isset($this->createdAt)) {
            $json['createdAt']   = DateTimeHelper::toRfc3339DateTime($this->createdAt);
        }
        if (isset($this->updatedAt)) {
            $json['updatedAt']   = DateTimeHelper::toRfc3339DateTime($this->updatedAt);
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
