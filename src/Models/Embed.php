<?php

declare(strict_types=1);

/*
 * CuadraAiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace CuadraAiLib\Models;

use CuadraAiLib\ApiHelper;
use stdClass;

class Embed implements \JsonSerializable
{
    /**
     * @var string
     */
    private $model;

    /**
     * @var ContentEx[]
     */
    private $content;

    /**
     * @var string
     */
    private $purpose;

    /**
     * @param string $model
     * @param ContentEx[] $content
     * @param string $purpose
     */
    public function __construct(string $model, array $content, string $purpose)
    {
        $this->model = $model;
        $this->content = $content;
        $this->purpose = $purpose;
    }

    /**
     * Returns Model.
     * Model name
     */
    public function getModel(): string
    {
        return $this->model;
    }

    /**
     * Sets Model.
     * Model name
     *
     * @required
     * @maps model
     */
    public function setModel(string $model): void
    {
        $this->model = $model;
    }

    /**
     * Returns Content.
     * Request content
     *
     * @return ContentEx[]
     */
    public function getContent(): array
    {
        return $this->content;
    }

    /**
     * Sets Content.
     * Request content
     *
     * @required
     * @maps content
     *
     * @param ContentEx[] $content
     */
    public function setContent(array $content): void
    {
        $this->content = $content;
    }

    /**
     * Returns Purpose.
     * The purpose of the embed, it could be 'search_document', 'search_query', 'classification', o
     * 'clustering'.
     */
    public function getPurpose(): string
    {
        return $this->purpose;
    }

    /**
     * Sets Purpose.
     * The purpose of the embed, it could be 'search_document', 'search_query', 'classification', o
     * 'clustering'.
     *
     * @required
     * @maps purpose
     */
    public function setPurpose(string $purpose): void
    {
        $this->purpose = $purpose;
    }

    /**
     * Converts the Embed object to a human-readable string representation.
     *
     * @return string The string representation of the Embed object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Embed',
            [
                'model' => $this->model,
                'content' => $this->content,
                'purpose' => $this->purpose,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['model', 'content', 'purpose'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['model']   = $this->model;
        $json['content'] = $this->content;
        $json['purpose'] = $this->purpose;
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
