<?php

declare(strict_types=1);

/*
 * CuadraAiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace CuadraAiLib\Models;

use CuadraAiLib\ApiHelper;
use stdClass;

class PaginatedResponseExListModelEx implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $page;

    /**
     * @var int|null
     */
    private $size;

    /**
     * @var ModelEx[]|null
     */
    private $data;

    /**
     * Returns Page.
     */
    public function getPage(): ?int
    {
        return $this->page;
    }

    /**
     * Sets Page.
     *
     * @maps page
     */
    public function setPage(?int $page): void
    {
        $this->page = $page;
    }

    /**
     * Returns Size.
     */
    public function getSize(): ?int
    {
        return $this->size;
    }

    /**
     * Sets Size.
     *
     * @maps size
     */
    public function setSize(?int $size): void
    {
        $this->size = $size;
    }

    /**
     * Returns Data.
     *
     * @return ModelEx[]|null
     */
    public function getData(): ?array
    {
        return $this->data;
    }

    /**
     * Sets Data.
     *
     * @maps data
     *
     * @param ModelEx[]|null $data
     */
    public function setData(?array $data): void
    {
        $this->data = $data;
    }

    /**
     * Converts the PaginatedResponseExListModelEx object to a human-readable string representation.
     *
     * @return string The string representation of the PaginatedResponseExListModelEx object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'PaginatedResponseExListModelEx',
            [
                'page' => $this->page,
                'size' => $this->size,
                'data' => $this->data,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    protected $propertyNames = ['page', 'size', 'data'];

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        if (in_array($name, $this->propertyNames, true)) {
            throw new \InvalidArgumentException(
                "The additional property key, '$name' conflicts with one of the model's properties"
            );
        }

        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->page)) {
            $json['page'] = $this->page;
        }
        if (isset($this->size)) {
            $json['size'] = $this->size;
        }
        if (isset($this->data)) {
            $json['data'] = $this->data;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
